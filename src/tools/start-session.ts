import { CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import { BaseTool } from './base.js';
import * as path from 'path';
import * as fs from 'fs/promises';

export class StartSessionTool extends BaseTool {
  async execute(params: {
    repoRoot?: string;
    note?: string;
    ttlDays?: number;
    debug_prompt?: string;
  }): Promise<CallToolResult> {
    try {
      const { repoRoot, note, ttlDays = 7, debug_prompt } = params;
      
      const session = await this.sessionManager.createSession(repoRoot, note, ttlDays);
      
      // Save debug prompt if provided
      if (debug_prompt && session.repoRoot) {
        await this.saveDebugRequest(session.repoRoot, debug_prompt);
      }
      
      const links = [
        `vdt://sessions/${session.sid}/`,
        this.sessionManager.getResourceLink(session.sid, 'meta.json'),
        this.sessionManager.getResourceLink(session.sid, 'logs/capture.ndjson')
      ];

      return this.createSuccessResponse({
        sid: session.sid,
        spec: "VDT DebugSpec v0.3 (KISS)",
        links,
        system_reminder: "Follow minimal loop: capture → analyze → clarify (if needed) → fix/replay → summary"
      });

    } catch (error) {
      return this.createErrorResponse(
        null,
        'start_session',
        'START_SESSION_ERROR',
        error,
        'Check repository root permissions and disk space'
      );
    }
  }

  private async saveDebugRequest(repoRoot: string, debugPrompt: string): Promise<void> {
    try {
      // Extract project name from repo root path
      const projectName = path.basename(repoRoot);
      
      // Create .vdt directory if it doesn't exist
      const vdtDir = path.join(repoRoot, '.vdt');
      await fs.mkdir(vdtDir, { recursive: true });
      
      // Create debug requests file
      const debugRequestsFile = path.join(vdtDir, `debug_requests_${projectName}.md`);
      
      // Create content with timestamp
      const timestamp = new Date().toISOString();
      const content = `# Debug Request - ${projectName}

**Timestamp**: ${timestamp}

## User Debug Request

${debugPrompt}

---
*Generated by VDT start_session tool*
`;
      
      await fs.writeFile(debugRequestsFile, content, 'utf-8');
      console.log(`[VDT] Debug request saved to: ${debugRequestsFile}`);
    } catch (error) {
      console.warn(`[VDT] Failed to save debug request: ${error}`);
      // Don't fail the entire operation if debug request saving fails
    }
  }
}
